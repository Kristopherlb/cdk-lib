# Template Configuration - Principle 6: Separate Data from Logic
# This externalizes template patterns from the TemplateEngine code

templates:
  service_base: |
    service: {{serviceName}}
    owner: {{owner}}
    runtime: nodejs20
    {{#complianceFramework}}
    complianceFramework: {{complianceFramework}}
    {{/complianceFramework}}

    labels:
      domain: platform
      {{#isFedRAMP}}
      classification: controlled
      {{/isFedRAMP}}

    environments:
      dev:
        defaults:
          logLevel: debug
          {{#isFedRAMP}}
          auditLevel: detailed
          {{/isFedRAMP}}
      prod:
        defaults:
          logLevel: info
          {{#isFedRAMP}}
          auditLevel: comprehensive
          {{/isFedRAMP}}

    components:

  lambda_api_with_db: |
      - name: api
        type: lambda-api
        config:
          routes:
            - method: GET
              path: /health
              handler: src/api.health
            - method: POST
              path: /items
              handler: src/api.createItem
            - method: GET
              path: /items
              handler: src/api.listItems
        binds:
          - to: database
            capability: db:postgres
            access: read
            env:
              host: DB_HOST
              secretArn: DB_SECRET_ARN

      - name: database
        type: rds-postgres
        config:
          dbName: {{serviceName}}
          {{#isFedRAMP}}
          backupRetentionDays: 35
          {{/isFedRAMP}}
          {{^isFedRAMP}}
          backupRetentionDays: 7
          {{/isFedRAMP}}

  worker_with_queue: |
      - name: queue
        type: sqs-queue
        config:
          fifo: false
          visibilityTimeout: 300

      - name: worker
        type: lambda-worker
        config:
          handler: src/worker.process
          batchSize: 10
        binds:
          - to: queue
            capability: queue:sqs
            access: read
            env:
              queueUrl: QUEUE_URL

  empty_service: |
      - name: hello
        type: lambda-api
        config:
          routes:
            - method: GET
              path: /hello
              handler: src/handler.hello

source_files:
  api_lambda: |
    // API Lambda Handler
    export const health = async (event: any) => {
      return {
        statusCode: 200,
        body: JSON.stringify({
          status: 'healthy',
          service: process.env.SERVICE_NAME || 'unknown'
        })
      };
    };

    export const createItem = async (event: any) => {
      // TODO: Implement item creation
      return {
        statusCode: 201,
        body: JSON.stringify({
          message: 'Item created successfully'
        })
      };
    };

    export const listItems = async (event: any) => {
      // TODO: Implement item listing
      return {
        statusCode: 200,
        body: JSON.stringify({
          items: []
        })
      };
    };

  worker_lambda: |
    // Worker Lambda Handler
    export const process = async (event: any) => {
      console.log('Processing SQS messages:', JSON.stringify(event, null, 2));
      
      // Process each record in the batch
      for (const record of event.Records) {
        try {
          const message = JSON.parse(record.body);
          console.log('Processing message:', message);
          
          // TODO: Implement message processing logic
          
        } catch (error) {
          console.error('Error processing message:', error);
          throw error; // This will cause the message to be retried or sent to DLQ
        }
      }
      
      return { statusCode: 200 };
    };

  basic_handler: |
    // Basic Lambda Handler
    export const hello = async (event: any) => {
      return {
        statusCode: 200,
        body: JSON.stringify({
          message: 'Hello from your new service!',
          event: event
        })
      };
    };

gitignore_template: |
  # Dependencies
  node_modules/
  npm-debug.log*
  yarn-debug.log*
  yarn-error.log*

  # Build outputs
  dist/
  build/
  *.tsbuildinfo

  # Environment files
  .env
  .env.local
  .env.development.local
  .env.test.local
  .env.production.local

  # IDE files
  .vscode/
  .idea/
  *.swp
  *.swo
  *~

  # OS files
  .DS_Store
  Thumbs.db

  # Platform files
  cdk.out/
  cdk.context.json
  outputs.json
  plan.json

patches_stub: |
  // Platform Patches File
  // 
  // This file allows you to make surgical modifications to the generated CDK stack
  // when the standard overrides system is not sufficient for your needs.
  // 
  // Documentation: https://platform.internal/docs/patches
  // 
  // Example:
  // export const tightenSecurityGroups = (context: PatchContext) => {
  //   // Modify security group rules here
  //   return {
  //     description: "Tightened security group rules for compliance",
  //     riskLevel: "low"
  //   };
  // };

  export {}; // Make this file a module