​Platform Feature Flagging & Canary Deployment Standard
​Version: 1.0
Status: Published
Last Updated: September 6, 2025
​1. Overview & Vision
​This document defines the specification for the platform's standardized feature flagging and progressive delivery capabilities. Decoupling code deployment from feature release is a hallmark of mature, high-velocity software engineering. It allows teams to safely test new features in production, mitigate risk, and release with confidence.
​The vision of this standard is to make sophisticated release strategies like feature flagging and canary deployments a first-class, zero-friction capability of the platform. We will achieve this by adopting the Cloud Native Computing Foundation (CNCF) OpenFeature standard. By standardizing the API for feature flagging, we decouple our application code from any specific backend provider, giving our teams the flexibility to choose the right tool for the job while maintaining a consistent, secure, and observable developer experience.
​2. Guiding Principles
​Standardize the API, Not the Backend: The platform MUST use the OpenFeature SDKs. This ensures application code is portable and the developer experience is consistent, regardless of the chosen feature flag provider.
​Vendor Agnostic: The platform MUST support multiple feature flagging backends. The initial implementation will support AWS AppConfig as the default, managed provider, but the architecture MUST allow for other providers (e.g., LaunchDarkly, Flagsmith) to be integrated in the future.
​Manage Declaratively: Feature flags and their backend configurations MUST be defined declaratively within the service.yml manifest. This ensures they are version-controlled and auditable.
​Integrate Progressive Delivery: Canary and linear deployments MUST be a simple, declarative option on our core compute components, orchestrated automatically by the platform's CI/CD system.
​3. Architectural Implementation
​This standard is implemented through a new set of components, an enhancement to existing components, and a new binder strategy.
​New Component: openfeature-provider
​Purpose: This component is responsible for provisioning the backend infrastructure for a chosen feature flag provider.
​Example (aws-appconfig): When providerType: 'aws-appconfig' is specified, this component will create an AWS AppConfig Application, Environment, and a Configuration Profile.
​New Component: feature-flag
​Purpose: This component defines an individual feature flag and its attributes (e.g., name, description, type, default value) within a given provider.
​Binder Strategy: ComputeToOpenFeatureBinder
​Purpose: This new binder is responsible for connecting a compute component (like lambda-api) to an openfeature-provider.
​Logic: It does not grant data access. Instead, it injects the necessary environment variables into the compute component's runtime. The OpenFeature SDKs are designed to read these variables to automatically configure themselves, discovering the correct provider and profile to connect to. This is a perfect example of a sidecar-like, configuration-focused binding.
​CI/CD Integration (svc up enhancement):
​The svc up command and the reference CI/CD pipeline will be enhanced to detect a deploymentStrategy block on a component. When a canary or linear strategy is found, it will automatically configure AWS CodeDeploy to manage the traffic-shifting deployment for that resource.
​4. The Developer Experience (The Manifest)
​The developer experience is designed to be simple and declarative.