​Platform Model Context Protocol (MCP) Server Specification
​Version: 1.0
Status: Published
Last Updated: September 6, 2025
​1. Overview & Vision
​This document defines the specification for the platform's Model Context Protocol (MCP) Server. This server acts as the definitive, machine-readable API for the entire platform ecosystem. It has two primary functions:
​To Describe: It provides structured, real-time context about our platform's capabilities, schemas, and deployed services to trusted clients.
​To Generate: It provides tooling endpoints that can generate the boilerplate code required to extend the platform with new components and capabilities.
​The vision is to create a "System-Level API" for our infrastructure that acts as an intelligent co-pilot for both using and building the platform. By exposing both descriptive and generative context, we enable next-generation tools like GitHub Copilot, Cursor, and autonomous AIOps agents to understand, interact with, and accelerate the development of our entire software ecosystem.
​2. Guiding Principles
​Descriptive First, Generative Second: The server's primary function is to provide read-only information about the desired and actual state of our services. Generative capabilities are a powerful extension that produce code, but they do not directly modify live infrastructure.
​Desired and Actual State: The server MUST be able to report on both the desired state (as defined in service.yml manifests) and the actual state (from live AWS APIs).
​Schema-Driven: All data exposed by the server MUST conform to the version-controlled JSON schemas used by the platform. All generated code MUST adhere to the platform's established design patterns.
​Secure by Design: Access to the MCP server MUST be authenticated and authorized, with distinct permissions for read-only versus generative actions.
​3. Architectural Implementation
​Service: A standalone, containerized REST API service (e.g., ecs-fargate-service) managed by the platform.
​Data Sources:
​Desired State: Read-only access to the Git repositories containing service manifests.
​Actual State: A read-only IAM role to describe resources across the organization's accounts.
​Platform Templates: Read-only access to a repository of code templates for generating new components, binders, and builders.
​Authentication: A token-based authentication mechanism with scopes (e.g., read:services, generate:components, admin:platform).
​4. The API Contract (Endpoints)
​The MCP server's API is divided into four sections: platform description, service observation, generative tooling, and the new platform administration toolkit.
​4.1. Platform-Level Endpoints (The "Developer's Toolbox")
​These endpoints provide read-only context for understanding the platform.